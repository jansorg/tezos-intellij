/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.tezos.lang.michelson.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.tezos.lang.michelson.MichelsonTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/IslandWork/self-employment/customers/Tezos Foundation/tezos-intellij-plugin/grammar/_MichelsonLexer.flex</tt>
 */
public class _MichelsonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\0\1\32\1\63\1\0\1\61\2\0\1\66\1\67\1\65\2"+
    "\0\1\24\1\62\1\64\1\26\11\25\1\57\1\72\4\0\1\60\1\50\1\30\1\35\1\55\1\40\1"+
    "\47\1\45\1\54\1\46\2\23\1\43\1\36\1\42\1\53\1\37\1\41\1\52\1\51\1\44\1\56"+
    "\5\23\1\0\1\33\2\0\1\22\1\0\1\6\1\34\1\20\1\21\1\11\1\31\1\17\5\31\1\10\1"+
    "\14\1\16\1\5\1\31\1\7\1\15\1\12\1\13\2\31\1\27\2\31\1\70\1\0\1\71\7\0\1\1"+
    "\32\0\1\4\337\0\1\4\177\0\13\4\35\0\2\1\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\5\4\1\5\1\1\2\6"+
    "\1\7\11\5\1\10\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\0\4\4"+
    "\1\23\1\5\1\0\13\5\3\10\3\11\3\12\1\0"+
    "\1\24\1\25\4\4\1\26\1\5\1\27\13\5\1\0"+
    "\3\4\1\30\3\5\1\31\3\4\3\5\1\4\1\5"+
    "\1\27\1\4\1\5\1\4\4\5\1\27\3\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\261\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u0289\0\u02c4\0\166"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\166\0\166"+
    "\0\166\0\166\0\166\0\u0639\0\166\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u024e\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887"+
    "\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\166\0\u0ad5\0\u0b10\0\166\0\u0b4b\0\u0b86\0\166"+
    "\0\u0bc1\0\u0bfc\0\166\0\166\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u07d6\0\u0d23\0\u079b\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u0162\0\u10d3\0\u110e\0\u1149\0\166\0\u1184"+
    "\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\5\10"+
    "\1\12\2\10\1\13\2\10\1\14\1\15\1\16\1\17"+
    "\1\10\1\14\1\10\1\20\1\3\1\10\1\21\1\22"+
    "\1\23\6\14\1\24\1\25\1\26\1\27\3\14\1\30"+
    "\1\31\1\32\1\33\1\34\1\3\1\35\1\36\1\3"+
    "\1\37\1\40\1\41\1\42\1\43\32\44\1\45\1\46"+
    "\37\44\74\0\4\6\67\0\1\6\1\4\2\6\73\0"+
    "\1\10\1\47\15\10\1\0\5\10\2\0\23\10\21\0"+
    "\17\10\1\0\5\10\2\0\23\10\21\0\4\10\1\50"+
    "\12\10\1\0\5\10\2\0\23\10\21\0\5\10\1\51"+
    "\11\10\1\0\5\10\2\0\23\10\21\0\11\10\1\52"+
    "\5\10\1\0\5\10\2\0\23\10\21\0\15\53\2\54"+
    "\1\0\2\54\1\53\1\54\1\53\2\0\1\53\22\54"+
    "\41\0\2\16\71\0\2\16\1\55\50\0\15\53\2\54"+
    "\1\0\2\54\1\53\1\54\1\53\2\0\1\53\1\54"+
    "\1\56\11\54\1\57\4\54\1\57\1\54\21\0\15\53"+
    "\2\54\1\0\2\54\1\53\1\54\1\53\2\0\1\53"+
    "\13\54\1\60\6\54\21\0\15\53\2\54\1\0\2\54"+
    "\1\53\1\54\1\53\2\0\1\53\2\54\1\61\6\54"+
    "\1\61\1\54\1\61\6\54\21\0\15\53\2\54\1\0"+
    "\2\54\1\53\1\54\1\53\2\0\1\53\12\54\1\62"+
    "\7\54\21\0\15\53\2\54\1\0\2\54\1\53\1\54"+
    "\1\53\2\0\1\53\13\54\1\63\6\54\21\0\15\53"+
    "\2\54\1\0\2\54\1\53\1\54\1\53\2\0\1\53"+
    "\14\54\1\64\5\54\21\0\15\53\2\54\1\0\2\54"+
    "\1\53\1\54\1\53\2\0\1\53\3\54\1\65\16\54"+
    "\21\0\15\53\2\54\1\0\2\54\1\53\1\54\1\53"+
    "\2\0\1\53\11\54\1\66\7\54\1\67\21\0\15\53"+
    "\2\54\1\0\2\54\1\53\1\54\1\53\2\0\1\53"+
    "\5\54\1\70\14\54\21\0\17\71\3\0\3\71\2\0"+
    "\23\71\1\0\1\72\1\73\16\0\17\74\3\0\3\74"+
    "\2\0\23\74\1\0\1\75\1\76\16\0\17\77\3\0"+
    "\3\77\2\0\23\77\1\0\1\100\1\101\11\0\1\35"+
    "\3\0\67\35\65\0\1\102\5\0\32\44\2\0\37\44"+
    "\7\103\1\104\2\103\1\104\1\103\1\104\15\103\3\104"+
    "\36\103\5\0\2\10\1\105\14\10\1\0\5\10\2\0"+
    "\23\10\21\0\5\10\1\106\11\10\1\0\5\10\2\0"+
    "\23\10\21\0\11\10\1\107\5\10\1\0\5\10\2\0"+
    "\23\10\21\0\14\10\1\110\2\10\1\0\5\10\2\0"+
    "\23\10\21\0\17\54\1\0\5\54\2\0\23\54\41\0"+
    "\2\111\1\0\1\111\4\0\1\111\2\0\1\111\6\0"+
    "\2\111\4\0\1\111\22\0\17\54\1\0\5\54\2\0"+
    "\3\54\1\112\17\54\21\0\17\54\1\0\5\54\2\0"+
    "\14\54\1\57\1\54\1\113\2\54\1\57\1\54\21\0"+
    "\17\54\1\0\5\54\2\0\3\54\1\114\17\54\21\0"+
    "\17\54\1\0\5\54\2\0\3\54\1\61\6\54\1\61"+
    "\1\54\1\61\1\54\1\113\4\54\21\0\15\54\1\115"+
    "\1\54\1\0\5\54\2\0\1\54\1\116\2\54\1\117"+
    "\1\54\1\120\1\121\1\54\1\121\11\54\21\0\17\54"+
    "\1\0\5\54\2\0\12\54\1\122\10\54\21\0\17\54"+
    "\1\0\5\54\2\0\15\54\1\123\5\54\21\0\17\54"+
    "\1\0\5\54\2\0\10\54\1\114\12\54\21\0\17\54"+
    "\1\0\5\54\2\0\12\54\1\124\10\54\21\0\17\54"+
    "\1\0\5\54\2\0\22\54\1\125\21\0\17\54\1\0"+
    "\5\54\2\0\3\54\1\126\17\54\21\0\17\71\1\0"+
    "\5\71\2\0\23\71\3\0\1\71\71\0\1\72\16\0"+
    "\17\74\1\0\5\74\2\0\23\74\3\0\1\74\71\0"+
    "\1\75\16\0\17\77\1\0\5\77\2\0\23\77\3\0"+
    "\1\77\71\0\1\100\11\0\65\102\1\127\5\102\5\0"+
    "\1\10\1\130\15\10\1\0\5\10\2\0\23\10\21\0"+
    "\6\10\1\131\10\10\1\0\5\10\2\0\23\10\21\0"+
    "\2\10\1\132\14\10\1\0\5\10\2\0\23\10\21\0"+
    "\4\10\1\133\12\10\1\0\5\10\2\0\23\10\21\0"+
    "\17\54\1\0\5\54\2\0\4\54\1\117\1\54\1\120"+
    "\1\121\1\54\1\121\11\54\21\0\15\54\1\134\1\54"+
    "\1\0\5\54\2\0\23\54\21\0\17\54\1\0\5\54"+
    "\2\0\15\54\1\135\5\54\21\0\17\54\1\0\5\54"+
    "\2\0\2\54\1\56\20\54\21\0\17\54\1\0\5\54"+
    "\2\0\5\54\1\113\15\54\21\0\17\54\1\0\5\54"+
    "\2\0\4\54\1\117\16\54\21\0\17\54\1\0\5\54"+
    "\2\0\4\54\1\113\3\54\1\113\12\54\21\0\17\54"+
    "\1\0\5\54\2\0\7\54\1\113\13\54\21\0\17\54"+
    "\1\0\5\54\2\0\4\54\1\136\16\54\21\0\17\54"+
    "\1\0\5\54\2\0\3\54\1\113\6\54\1\124\10\54"+
    "\21\0\17\54\1\0\5\54\2\0\3\54\1\113\16\54"+
    "\1\125\21\0\17\54\1\0\5\54\2\0\3\54\1\61"+
    "\6\54\1\61\1\54\1\61\6\54\100\0\1\137\13\0"+
    "\3\10\1\140\13\10\1\0\5\10\2\0\23\10\21\0"+
    "\2\10\1\141\14\10\1\0\5\10\2\0\23\10\21\0"+
    "\1\10\1\142\15\10\1\0\5\10\2\0\23\10\21\0"+
    "\17\54\1\0\5\54\2\0\1\54\1\143\21\54\21\0"+
    "\17\54\1\0\5\54\2\0\17\54\1\144\3\54\21\0"+
    "\17\54\1\0\5\54\2\0\16\54\1\145\4\54\21\0"+
    "\4\10\1\146\12\10\1\0\5\10\2\0\23\10\21\0"+
    "\7\10\1\133\7\10\1\0\5\10\2\0\23\10\21\0"+
    "\12\10\1\110\4\10\1\0\5\10\2\0\23\10\21\0"+
    "\17\54\1\0\5\54\2\0\14\54\1\57\4\54\1\57"+
    "\1\54\21\0\17\54\1\0\5\54\2\0\2\54\1\147"+
    "\20\54\21\0\17\54\1\0\5\54\2\0\10\54\1\150"+
    "\12\54\21\0\5\10\1\151\11\10\1\0\5\10\2\0"+
    "\23\10\21\0\17\54\1\0\5\54\2\0\4\54\1\113"+
    "\16\54\21\0\15\54\1\152\1\54\1\0\5\54\2\0"+
    "\23\54\21\0\4\10\1\153\12\10\1\0\5\10\2\0"+
    "\23\10\21\0\17\54\1\0\5\54\2\0\1\54\1\116"+
    "\2\54\1\117\1\54\1\154\1\155\1\54\1\121\3\54"+
    "\1\135\1\156\4\54\21\0\2\10\1\133\14\10\1\0"+
    "\5\10\2\0\23\10\21\0\17\54\1\0\5\54\2\0"+
    "\4\54\1\117\12\54\1\157\3\54\21\0\17\54\1\0"+
    "\5\54\2\0\4\54\1\160\3\54\1\113\12\54\21\0"+
    "\17\54\1\0\5\54\2\0\12\54\1\161\10\54\21\0"+
    "\17\54\1\0\5\54\2\0\6\54\1\147\14\54\21\0"+
    "\17\54\1\0\5\54\2\0\13\54\1\162\7\54\21\0"+
    "\17\54\1\0\5\54\2\0\11\54\1\163\11\54\21\0"+
    "\17\54\1\0\5\54\2\0\10\54\1\113\12\54\21\0"+
    "\17\54\1\0\5\54\2\0\20\54\1\162\2\54\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\14\1\1\11\16\1\5\11\1\1\1\11"+
    "\1\0\6\1\1\0\14\1\1\11\2\1\1\11\2\1"+
    "\1\11\1\1\1\0\2\11\22\1\1\0\7\1\1\11"+
    "\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MichelsonLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MichelsonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 26: break;
          case 2: 
            { return EOL;
            } 
            // fall through
          case 27: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 28: break;
          case 4: 
            { return TYPE_NAME;
            } 
            // fall through
          case 29: break;
          case 5: 
            { return INSTRUCTION_TOKEN;
            } 
            // fall through
          case 30: break;
          case 6: 
            { return INT;
            } 
            // fall through
          case 31: break;
          case 7: 
            { yybegin(S_STRING); return QUOTE;
            } 
            // fall through
          case 32: break;
          case 8: 
            { return TYPE_ANNOTATION_TOKEN;
            } 
            // fall through
          case 33: break;
          case 9: 
            { return VAR_ANNOTATION_TOKEN;
            } 
            // fall through
          case 34: break;
          case 10: 
            { return FIELD_ANNOTATION_TOKEN;
            } 
            // fall through
          case 35: break;
          case 11: 
            { return COMMENT_LINE;
            } 
            // fall through
          case 36: break;
          case 12: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 37: break;
          case 13: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 38: break;
          case 14: 
            { return LEFT_CURLY;
            } 
            // fall through
          case 39: break;
          case 15: 
            { return RIGHT_CURLY;
            } 
            // fall through
          case 40: break;
          case 16: 
            { return SEMI;
            } 
            // fall through
          case 41: break;
          case 17: 
            { return STRING_CONTENT;
            } 
            // fall through
          case 42: break;
          case 18: 
            { yybegin(YYINITIAL); return QUOTE;
            } 
            // fall through
          case 43: break;
          case 19: 
            { return TAG_TOKEN;
            } 
            // fall through
          case 44: break;
          case 20: 
            { return STRING_ESCAPE_INVALID;
            } 
            // fall through
          case 45: break;
          case 21: 
            { return STRING_ESCAPE;
            } 
            // fall through
          case 46: break;
          case 22: 
            { return BYTE;
            } 
            // fall through
          case 47: break;
          case 23: 
            { return MACRO_TOKEN;
            } 
            // fall through
          case 48: break;
          case 24: 
            { return SECTION_NAME;
            } 
            // fall through
          case 49: break;
          case 25: 
            { return COMMENT_MULTI_LINE;
            } 
            // fall through
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
