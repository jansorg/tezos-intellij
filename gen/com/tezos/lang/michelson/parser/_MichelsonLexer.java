/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.tezos.lang.michelson.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.tezos.lang.michelson.MichelsonTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/IslandWork/self-employment/customers/Tezos Foundation/tezos-intellij-plugin/grammar/_MichelsonLexer.flex</tt>
 */
public class _MichelsonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\33\1\66\1\0\1\64\2\0\1\71\1\72\1\70\2\0\1\31"+
    "\1\65\1\67\1\34\11\32\1\62\1\75\4\0\1\63\1\52\1\36\1\40\1\60\1\43\1\51\1\50"+
    "\1\57\1\53\2\37\1\46\1\41\1\45\1\56\1\42\1\44\1\55\1\54\1\47\1\61\5\37\4\0"+
    "\1\26\1\0\1\4\1\22\1\16\1\17\1\7\1\30\1\15\1\27\1\20\1\30\1\24\1\23\1\6\1"+
    "\12\1\14\1\3\1\30\1\5\1\13\1\10\1\11\2\30\1\35\1\25\1\21\1\73\1\0\1\74\7\0"+
    "\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\15\3\1\1\1\4\1\1\1\4"+
    "\12\5\1\6\1\7\1\1\1\10\1\11\1\12\1\13"+
    "\1\14\11\3\1\15\7\3\1\0\1\16\1\0\1\17"+
    "\5\5\2\17\5\5\1\17\1\5\3\6\1\0\3\3"+
    "\1\20\13\3\1\21\1\5\1\22\1\5\2\17\4\5"+
    "\1\17\1\5\1\0\7\3\1\23\4\3\4\5\1\24"+
    "\1\17\1\5\1\25\1\22\1\26\11\3\1\5\1\27"+
    "\1\5\4\3\1\22\3\3\1\5\2\3\6\5\1\22"+
    "\5\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744"+
    "\0\u0782\0\76\0\76\0\76\0\76\0\76\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\370"+
    "\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u041e"+
    "\0\76\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\76\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\370\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u0ba0\0\u139e\0\u0c1c\0\u13dc"+
    "\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\370\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e"+
    "\0\u19ac\0\u0bde\0\u19ea\0\u1a28\0\u0bde\0\u15cc\0\76\0\u1a66"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u1c94\0\u0bde\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8"+
    "\0\u2226\0\u2264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\5\1\11\1\12\1\13\1\5\1\14\1\5\1\15"+
    "\1\5\1\16\1\17\1\20\4\5\1\21\1\22\1\23"+
    "\1\24\1\5\2\25\1\26\1\27\1\30\4\25\1\31"+
    "\1\25\1\32\1\33\1\25\1\34\3\25\1\35\1\36"+
    "\3\37\1\2\1\40\1\41\1\2\1\42\1\43\1\44"+
    "\1\45\1\46\77\0\2\3\76\0\1\5\1\47\24\5"+
    "\4\0\1\5\43\0\26\5\4\0\1\5\43\0\4\5"+
    "\1\50\21\5\4\0\1\5\43\0\1\5\1\51\24\5"+
    "\4\0\1\5\43\0\4\5\1\52\10\5\1\53\10\5"+
    "\4\0\1\5\43\0\1\5\1\54\24\5\4\0\1\5"+
    "\43\0\4\5\1\55\1\56\20\5\4\0\1\5\43\0"+
    "\1\57\1\5\1\60\23\5\4\0\1\5\43\0\11\5"+
    "\1\61\14\5\4\0\1\5\43\0\7\5\1\54\16\5"+
    "\4\0\1\5\43\0\11\5\1\62\3\5\1\63\4\5"+
    "\1\64\3\5\4\0\1\5\43\0\1\5\1\65\13\5"+
    "\1\66\10\5\4\0\1\5\43\0\4\5\1\67\21\5"+
    "\4\0\1\5\72\0\1\22\1\0\1\22\41\0\33\70"+
    "\1\71\42\70\32\0\1\22\1\0\1\22\1\72\43\0"+
    "\23\73\1\74\2\73\1\0\1\74\1\0\1\74\1\73"+
    "\24\74\17\0\23\73\1\74\2\73\1\0\1\74\1\0"+
    "\1\74\1\73\3\74\1\75\10\74\1\76\5\74\1\76"+
    "\1\74\17\0\23\73\1\74\2\73\1\0\1\74\1\0"+
    "\1\74\1\73\14\74\1\77\7\74\17\0\23\73\1\74"+
    "\2\73\1\0\1\74\1\0\1\74\1\73\4\74\1\100"+
    "\7\74\2\100\6\74\17\0\2\73\1\101\20\73\1\74"+
    "\2\73\1\0\1\74\1\0\1\74\1\73\24\74\17\0"+
    "\1\73\1\102\21\73\1\74\2\73\1\0\1\74\1\0"+
    "\1\74\1\73\14\74\1\103\7\74\17\0\23\73\1\74"+
    "\2\73\1\0\1\74\1\0\1\74\1\73\16\74\1\104"+
    "\5\74\17\0\23\73\1\74\2\73\1\0\1\74\1\0"+
    "\1\74\1\73\5\74\1\105\16\74\17\0\23\73\1\74"+
    "\2\73\1\0\1\74\1\0\1\74\1\73\15\74\1\106"+
    "\5\74\1\107\17\0\7\73\1\110\13\73\1\74\2\73"+
    "\1\0\1\74\1\0\1\74\1\73\7\74\1\111\14\74"+
    "\17\0\26\112\4\0\25\112\1\0\1\113\1\114\11\0"+
    "\1\40\1\0\74\40\70\0\1\115\10\0\2\5\1\116"+
    "\12\5\1\117\10\5\4\0\1\5\43\0\5\5\1\120"+
    "\20\5\4\0\1\5\43\0\1\60\25\5\4\0\1\5"+
    "\43\0\16\5\1\121\7\5\4\0\1\5\43\0\3\5"+
    "\1\122\22\5\4\0\1\5\43\0\5\5\1\121\20\5"+
    "\4\0\1\5\43\0\5\5\1\60\20\5\4\0\1\5"+
    "\43\0\2\5\1\123\6\5\1\124\14\5\4\0\1\5"+
    "\43\0\5\5\1\125\20\5\4\0\1\5\43\0\7\5"+
    "\1\126\4\5\1\127\11\5\4\0\1\5\43\0\11\5"+
    "\1\130\14\5\4\0\1\5\43\0\12\5\1\131\13\5"+
    "\4\0\1\5\43\0\5\5\1\132\20\5\4\0\1\5"+
    "\43\0\3\5\1\133\22\5\4\0\1\5\43\0\10\5"+
    "\1\55\15\5\4\0\1\5\43\0\22\5\1\134\3\5"+
    "\4\0\1\5\72\0\1\135\1\0\1\135\1\0\1\135"+
    "\1\0\1\135\2\0\1\135\5\0\2\135\5\0\1\135"+
    "\20\0\23\73\1\0\2\73\4\0\1\73\66\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\0\24\74\42\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\0\4\74\1\136\17\74"+
    "\42\0\1\74\3\0\1\74\1\0\1\74\1\0\14\74"+
    "\1\76\2\74\1\137\2\74\1\76\1\74\42\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\0\4\74\1\140\17\74"+
    "\42\0\1\74\3\0\1\74\1\0\1\74\1\0\4\74"+
    "\1\100\7\74\2\100\1\74\1\137\4\74\17\0\6\73"+
    "\1\141\14\73\1\0\2\73\4\0\1\73\43\0\20\73"+
    "\1\142\2\73\1\0\2\73\4\0\1\73\66\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\0\15\74\1\143\6\74"+
    "\42\0\1\74\3\0\1\74\1\0\1\74\1\0\16\74"+
    "\1\144\5\74\42\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\0\11\74\1\140\12\74\42\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\0\15\74\1\145\6\74\42\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\0\23\74\1\146\17\0"+
    "\15\73\1\147\5\73\1\0\2\73\4\0\1\73\66\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\0\4\74\1\150"+
    "\17\74\17\0\26\112\1\0\1\112\1\0\26\112\3\0"+
    "\1\112\74\0\1\113\11\0\70\115\1\151\5\115\3\0"+
    "\1\5\1\152\24\5\4\0\1\5\43\0\2\5\1\60"+
    "\23\5\4\0\1\5\43\0\6\5\1\153\17\5\4\0"+
    "\1\5\43\0\4\5\1\154\21\5\4\0\1\5\43\0"+
    "\15\5\1\155\10\5\4\0\1\5\43\0\2\5\1\156"+
    "\23\5\4\0\1\5\43\0\15\5\1\157\10\5\4\0"+
    "\1\5\43\0\5\5\1\160\20\5\4\0\1\5\43\0"+
    "\4\5\1\161\21\5\4\0\1\5\43\0\20\5\1\121"+
    "\5\5\4\0\1\5\43\0\23\5\1\162\2\5\4\0"+
    "\1\5\43\0\4\5\1\163\21\5\4\0\1\5\43\0"+
    "\17\5\1\164\6\5\4\0\1\5\43\0\23\5\1\165"+
    "\2\5\4\0\1\5\66\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\0\5\74\1\166\1\74\1\167\1\170\1\74"+
    "\1\170\11\74\42\0\1\171\3\0\1\74\1\0\1\74"+
    "\1\0\24\74\17\0\4\73\1\172\16\73\1\0\2\73"+
    "\4\0\1\73\43\0\10\73\1\173\12\73\1\0\2\73"+
    "\4\0\1\73\66\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\0\10\74\1\137\13\74\42\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\0\5\74\1\174\16\74\42\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\0\4\74\1\137\10\74"+
    "\1\145\6\74\42\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\0\4\74\1\137\16\74\1\146\17\0\5\73\1\175"+
    "\15\73\1\0\2\73\4\0\1\73\66\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\0\14\74\2\150\1\74\1\176"+
    "\4\74\103\0\1\177\11\0\3\5\1\200\22\5\4\0"+
    "\1\5\43\0\2\5\1\201\23\5\4\0\1\5\43\0"+
    "\10\5\1\202\15\5\4\0\1\5\43\0\7\5\1\203"+
    "\16\5\4\0\1\5\43\0\1\5\1\204\24\5\4\0"+
    "\1\5\43\0\11\5\1\205\14\5\4\0\1\5\43\0"+
    "\2\5\1\206\23\5\4\0\1\5\43\0\3\5\1\7"+
    "\22\5\4\0\1\5\43\0\10\5\1\121\15\5\4\0"+
    "\1\5\43\0\14\5\1\207\11\5\4\0\1\5\43\0"+
    "\24\5\1\210\1\5\4\0\1\5\66\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\0\6\74\1\137\15\74\42\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\0\5\74\1\166"+
    "\16\74\42\0\1\74\3\0\1\74\1\0\1\74\1\0"+
    "\5\74\1\137\3\74\1\137\12\74\42\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\0\2\74\1\211\21\74\17\0"+
    "\4\73\1\212\16\73\1\0\2\73\4\0\1\73\66\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\0\17\74\1\213"+
    "\4\74\17\0\4\5\1\214\21\5\4\0\1\5\43\0"+
    "\7\5\1\161\16\5\4\0\1\5\43\0\5\5\1\215"+
    "\20\5\4\0\1\5\43\0\12\5\1\121\13\5\4\0"+
    "\1\5\43\0\12\5\1\127\13\5\4\0\1\5\43\0"+
    "\7\5\1\60\16\5\4\0\1\5\43\0\1\5\1\216"+
    "\24\5\4\0\1\5\43\0\1\5\1\60\24\5\4\0"+
    "\1\5\43\0\1\5\1\217\24\5\4\0\1\5\66\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\0\14\74\1\76"+
    "\5\74\1\76\1\74\42\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\0\11\74\1\220\12\74\17\0\5\5\1\221"+
    "\20\5\4\0\1\5\43\0\1\5\1\222\24\5\4\0"+
    "\1\5\43\0\13\5\1\55\12\5\4\0\1\5\43\0"+
    "\10\5\1\223\15\5\4\0\1\5\66\0\1\224\3\0"+
    "\1\74\1\0\1\74\1\0\24\74\17\0\4\5\1\225"+
    "\21\5\4\0\1\5\43\0\3\5\1\226\22\5\4\0"+
    "\1\5\43\0\24\5\1\121\1\5\4\0\1\5\66\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\0\2\74\1\227"+
    "\2\74\1\166\1\74\1\230\1\231\1\74\1\170\3\74"+
    "\1\232\1\233\4\74\17\0\2\5\1\161\23\5\4\0"+
    "\1\5\43\0\1\121\25\5\4\0\1\5\66\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\0\3\74\1\75\20\74"+
    "\42\0\1\74\3\0\1\74\1\0\1\74\1\0\5\74"+
    "\1\166\12\74\1\234\3\74\42\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\0\5\74\1\235\3\74\1\137\12\74"+
    "\42\0\1\74\3\0\1\74\1\0\1\74\1\0\20\74"+
    "\1\236\3\74\42\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\0\15\74\1\237\6\74\42\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\0\7\74\1\240\14\74\42\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\0\13\74\1\241\10\74"+
    "\42\0\1\74\3\0\1\74\1\0\1\74\1\0\3\74"+
    "\1\240\20\74\42\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\0\12\74\1\242\11\74\42\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\0\5\74\1\137\16\74\42\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\0\11\74\1\137\12\74"+
    "\42\0\1\74\3\0\1\74\1\0\1\74\1\0\21\74"+
    "\1\241\2\74\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8866];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\5\11\21\1\1\0\1\11\1\0"+
    "\20\1\1\11\1\1\1\0\33\1\1\0\25\1\1\11"+
    "\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MichelsonLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MichelsonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 24: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 25: break;
          case 3: 
            { return TYPE_NAME;
            } 
            // fall through
          case 26: break;
          case 4: 
            { return INT;
            } 
            // fall through
          case 27: break;
          case 5: 
            { return INSTRUCTION_TOKEN;
            } 
            // fall through
          case 28: break;
          case 6: 
            { return ANNOTATION_TOKEN;
            } 
            // fall through
          case 29: break;
          case 7: 
            { return COMMENT_LINE;
            } 
            // fall through
          case 30: break;
          case 8: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 31: break;
          case 9: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 32: break;
          case 10: 
            { return LEFT_CURLY;
            } 
            // fall through
          case 33: break;
          case 11: 
            { return RIGHT_CURLY;
            } 
            // fall through
          case 34: break;
          case 12: 
            { return SEMI;
            } 
            // fall through
          case 35: break;
          case 13: 
            { return TYPE_NAME_COMPLEX;
            } 
            // fall through
          case 36: break;
          case 14: 
            { return STRING;
            } 
            // fall through
          case 37: break;
          case 15: 
            { return TAG;
            } 
            // fall through
          case 38: break;
          case 16: 
            { return TYPE_NAME_COMPARABLE;
            } 
            // fall through
          case 39: break;
          case 17: 
            { return BYTE;
            } 
            // fall through
          case 40: break;
          case 18: 
            { return MACRO_TOKEN;
            } 
            // fall through
          case 41: break;
          case 19: 
            { return SECTION_NAME;
            } 
            // fall through
          case 42: break;
          case 20: 
            { return TRUE;
            } 
            // fall through
          case 43: break;
          case 21: 
            { return UNIT;
            } 
            // fall through
          case 44: break;
          case 22: 
            { return COMMENT_MULTI_LINE;
            } 
            // fall through
          case 45: break;
          case 23: 
            { return FALSE;
            } 
            // fall through
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
