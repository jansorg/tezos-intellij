/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.tezos.lang.michelson.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.tezos.lang.michelson.MichelsonTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/IslandWork/self-employment/customers/Tezos Foundation/tezos-intellij-plugin/grammar/_MichelsonLexer.flex</tt>
 */
public class _MichelsonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\33\1\67\1\0\1\65\2\0\1\72\1\73\1\71\2\0\1\31"+
    "\1\66\1\70\1\35\11\32\1\63\1\76\4\0\1\64\1\53\1\37\1\41\1\61\1\44\1\52\1\51"+
    "\1\60\1\54\2\40\1\47\1\42\1\46\1\57\1\43\1\45\1\56\1\55\1\50\1\62\5\40\1\0"+
    "\1\34\2\0\1\26\1\0\1\4\1\22\1\16\1\17\1\7\1\30\1\15\1\27\1\20\1\30\1\24\1"+
    "\23\1\6\1\12\1\14\1\3\1\30\1\5\1\13\1\10\1\11\2\30\1\36\1\25\1\21\1\74\1\0"+
    "\1\75\7\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\15\3\1\1\1\4\1\1\1\4"+
    "\12\5\1\6\1\7\1\1\1\10\1\11\1\12\1\13"+
    "\1\14\11\3\1\15\7\3\1\0\1\16\2\0\1\17"+
    "\5\5\2\17\5\5\1\17\1\5\3\6\1\0\3\3"+
    "\1\20\13\3\1\16\1\21\1\5\1\22\1\5\2\17"+
    "\4\5\1\17\1\5\1\0\7\3\1\23\4\3\4\5"+
    "\1\24\1\17\1\5\1\25\1\22\1\26\11\3\1\5"+
    "\1\27\1\5\4\3\1\22\3\3\1\5\2\3\6\5"+
    "\1\22\5\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\u07a1\0\77\0\77\0\77\0\77\0\77\0\u07e0\0\u081f"+
    "\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\374"+
    "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u042f"+
    "\0\77\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\77\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\374\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4"+
    "\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u042f\0\u0c0f\0\u142e"+
    "\0\u0c8d\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7"+
    "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\u185d\0\374\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998"+
    "\0\u19d7\0\u1a16\0\u1a55\0\u0c4e\0\u1a94\0\u1ad3\0\u0c4e\0\u1665"+
    "\0\77\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c"+
    "\0\u1ccb\0\u1d0a\0\u1d49\0\u0c4e\0\u1d88\0\u1dc7\0\u1e06\0\u1e45"+
    "\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\u2331";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\5\1\11\1\12\1\13\1\5\1\14\1\5\1\15"+
    "\1\5\1\16\1\17\1\20\4\5\1\21\1\22\1\23"+
    "\1\2\1\24\1\5\2\25\1\26\1\27\1\30\4\25"+
    "\1\31\1\25\1\32\1\33\1\25\1\34\3\25\1\35"+
    "\1\36\3\37\1\2\1\40\1\41\1\2\1\42\1\43"+
    "\1\44\1\45\1\46\100\0\2\3\77\0\1\5\1\47"+
    "\24\5\5\0\1\5\43\0\26\5\5\0\1\5\43\0"+
    "\4\5\1\50\21\5\5\0\1\5\43\0\1\5\1\51"+
    "\24\5\5\0\1\5\43\0\4\5\1\52\10\5\1\53"+
    "\10\5\5\0\1\5\43\0\1\5\1\54\24\5\5\0"+
    "\1\5\43\0\4\5\1\55\1\56\20\5\5\0\1\5"+
    "\43\0\1\57\1\5\1\60\23\5\5\0\1\5\43\0"+
    "\11\5\1\61\14\5\5\0\1\5\43\0\7\5\1\54"+
    "\16\5\5\0\1\5\43\0\11\5\1\62\3\5\1\63"+
    "\4\5\1\64\3\5\5\0\1\5\43\0\1\5\1\65"+
    "\13\5\1\66\10\5\5\0\1\5\43\0\4\5\1\67"+
    "\21\5\5\0\1\5\72\0\1\22\2\0\1\22\41\0"+
    "\33\70\1\71\1\72\42\70\32\0\1\22\2\0\1\22"+
    "\1\73\43\0\23\74\1\75\2\74\1\0\1\75\2\0"+
    "\1\75\1\74\24\75\17\0\23\74\1\75\2\74\1\0"+
    "\1\75\2\0\1\75\1\74\3\75\1\76\10\75\1\77"+
    "\5\75\1\77\1\75\17\0\23\74\1\75\2\74\1\0"+
    "\1\75\2\0\1\75\1\74\14\75\1\100\7\75\17\0"+
    "\23\74\1\75\2\74\1\0\1\75\2\0\1\75\1\74"+
    "\4\75\1\101\7\75\2\101\6\75\17\0\2\74\1\102"+
    "\20\74\1\75\2\74\1\0\1\75\2\0\1\75\1\74"+
    "\24\75\17\0\1\74\1\103\21\74\1\75\2\74\1\0"+
    "\1\75\2\0\1\75\1\74\14\75\1\104\7\75\17\0"+
    "\23\74\1\75\2\74\1\0\1\75\2\0\1\75\1\74"+
    "\16\75\1\105\5\75\17\0\23\74\1\75\2\74\1\0"+
    "\1\75\2\0\1\75\1\74\5\75\1\106\16\75\17\0"+
    "\23\74\1\75\2\74\1\0\1\75\2\0\1\75\1\74"+
    "\15\75\1\107\5\75\1\110\17\0\7\74\1\111\13\74"+
    "\1\75\2\74\1\0\1\75\2\0\1\75\1\74\7\75"+
    "\1\112\14\75\17\0\26\113\5\0\25\113\1\0\1\114"+
    "\1\115\11\0\1\40\1\0\75\40\71\0\1\116\10\0"+
    "\2\5\1\117\12\5\1\120\10\5\5\0\1\5\43\0"+
    "\5\5\1\121\20\5\5\0\1\5\43\0\1\60\25\5"+
    "\5\0\1\5\43\0\16\5\1\122\7\5\5\0\1\5"+
    "\43\0\3\5\1\123\22\5\5\0\1\5\43\0\5\5"+
    "\1\122\20\5\5\0\1\5\43\0\5\5\1\60\20\5"+
    "\5\0\1\5\43\0\2\5\1\124\6\5\1\125\14\5"+
    "\5\0\1\5\43\0\5\5\1\126\20\5\5\0\1\5"+
    "\43\0\7\5\1\127\4\5\1\130\11\5\5\0\1\5"+
    "\43\0\11\5\1\131\14\5\5\0\1\5\43\0\12\5"+
    "\1\132\13\5\5\0\1\5\43\0\5\5\1\133\20\5"+
    "\5\0\1\5\43\0\3\5\1\134\22\5\5\0\1\5"+
    "\43\0\10\5\1\55\15\5\5\0\1\5\43\0\22\5"+
    "\1\135\3\5\5\0\1\5\40\0\33\70\1\136\1\72"+
    "\42\70\32\0\1\137\2\0\1\137\1\0\1\137\1\0"+
    "\1\137\2\0\1\137\5\0\2\137\5\0\1\137\20\0"+
    "\23\74\1\0\2\74\5\0\1\74\66\0\1\75\3\0"+
    "\1\75\2\0\1\75\1\0\24\75\42\0\1\75\3\0"+
    "\1\75\2\0\1\75\1\0\4\75\1\140\17\75\42\0"+
    "\1\75\3\0\1\75\2\0\1\75\1\0\14\75\1\77"+
    "\2\75\1\141\2\75\1\77\1\75\42\0\1\75\3\0"+
    "\1\75\2\0\1\75\1\0\4\75\1\142\17\75\42\0"+
    "\1\75\3\0\1\75\2\0\1\75\1\0\4\75\1\101"+
    "\7\75\2\101\1\75\1\141\4\75\17\0\6\74\1\143"+
    "\14\74\1\0\2\74\5\0\1\74\43\0\20\74\1\144"+
    "\2\74\1\0\2\74\5\0\1\74\66\0\1\75\3\0"+
    "\1\75\2\0\1\75\1\0\15\75\1\145\6\75\42\0"+
    "\1\75\3\0\1\75\2\0\1\75\1\0\16\75\1\146"+
    "\5\75\42\0\1\75\3\0\1\75\2\0\1\75\1\0"+
    "\11\75\1\142\12\75\42\0\1\75\3\0\1\75\2\0"+
    "\1\75\1\0\15\75\1\147\6\75\42\0\1\75\3\0"+
    "\1\75\2\0\1\75\1\0\23\75\1\150\17\0\15\74"+
    "\1\151\5\74\1\0\2\74\5\0\1\74\66\0\1\75"+
    "\3\0\1\75\2\0\1\75\1\0\4\75\1\152\17\75"+
    "\17\0\26\113\1\0\1\113\2\0\26\113\3\0\1\113"+
    "\75\0\1\114\11\0\71\116\1\153\5\116\3\0\1\5"+
    "\1\154\24\5\5\0\1\5\43\0\2\5\1\60\23\5"+
    "\5\0\1\5\43\0\6\5\1\155\17\5\5\0\1\5"+
    "\43\0\4\5\1\156\21\5\5\0\1\5\43\0\15\5"+
    "\1\157\10\5\5\0\1\5\43\0\2\5\1\160\23\5"+
    "\5\0\1\5\43\0\15\5\1\161\10\5\5\0\1\5"+
    "\43\0\5\5\1\162\20\5\5\0\1\5\43\0\4\5"+
    "\1\163\21\5\5\0\1\5\43\0\20\5\1\122\5\5"+
    "\5\0\1\5\43\0\23\5\1\164\2\5\5\0\1\5"+
    "\43\0\4\5\1\165\21\5\5\0\1\5\43\0\17\5"+
    "\1\166\6\5\5\0\1\5\43\0\23\5\1\167\2\5"+
    "\5\0\1\5\66\0\1\75\3\0\1\75\2\0\1\75"+
    "\1\0\5\75\1\170\1\75\1\171\1\172\1\75\1\172"+
    "\11\75\42\0\1\173\3\0\1\75\2\0\1\75\1\0"+
    "\24\75\17\0\4\74\1\174\16\74\1\0\2\74\5\0"+
    "\1\74\43\0\10\74\1\175\12\74\1\0\2\74\5\0"+
    "\1\74\66\0\1\75\3\0\1\75\2\0\1\75\1\0"+
    "\10\75\1\141\13\75\42\0\1\75\3\0\1\75\2\0"+
    "\1\75\1\0\5\75\1\176\16\75\42\0\1\75\3\0"+
    "\1\75\2\0\1\75\1\0\4\75\1\141\10\75\1\147"+
    "\6\75\42\0\1\75\3\0\1\75\2\0\1\75\1\0"+
    "\4\75\1\141\16\75\1\150\17\0\5\74\1\177\15\74"+
    "\1\0\2\74\5\0\1\74\66\0\1\75\3\0\1\75"+
    "\2\0\1\75\1\0\14\75\2\152\1\75\1\200\4\75"+
    "\104\0\1\201\11\0\3\5\1\202\22\5\5\0\1\5"+
    "\43\0\2\5\1\203\23\5\5\0\1\5\43\0\10\5"+
    "\1\204\15\5\5\0\1\5\43\0\7\5\1\205\16\5"+
    "\5\0\1\5\43\0\1\5\1\206\24\5\5\0\1\5"+
    "\43\0\11\5\1\207\14\5\5\0\1\5\43\0\2\5"+
    "\1\210\23\5\5\0\1\5\43\0\3\5\1\7\22\5"+
    "\5\0\1\5\43\0\10\5\1\122\15\5\5\0\1\5"+
    "\43\0\14\5\1\211\11\5\5\0\1\5\43\0\24\5"+
    "\1\212\1\5\5\0\1\5\66\0\1\75\3\0\1\75"+
    "\2\0\1\75\1\0\6\75\1\141\15\75\42\0\1\75"+
    "\3\0\1\75\2\0\1\75\1\0\5\75\1\170\16\75"+
    "\42\0\1\75\3\0\1\75\2\0\1\75\1\0\5\75"+
    "\1\141\3\75\1\141\12\75\42\0\1\75\3\0\1\75"+
    "\2\0\1\75\1\0\2\75\1\213\21\75\17\0\4\74"+
    "\1\214\16\74\1\0\2\74\5\0\1\74\66\0\1\75"+
    "\3\0\1\75\2\0\1\75\1\0\17\75\1\215\4\75"+
    "\17\0\4\5\1\216\21\5\5\0\1\5\43\0\7\5"+
    "\1\163\16\5\5\0\1\5\43\0\5\5\1\217\20\5"+
    "\5\0\1\5\43\0\12\5\1\122\13\5\5\0\1\5"+
    "\43\0\12\5\1\130\13\5\5\0\1\5\43\0\7\5"+
    "\1\60\16\5\5\0\1\5\43\0\1\5\1\220\24\5"+
    "\5\0\1\5\43\0\1\5\1\60\24\5\5\0\1\5"+
    "\43\0\1\5\1\221\24\5\5\0\1\5\66\0\1\75"+
    "\3\0\1\75\2\0\1\75\1\0\14\75\1\77\5\75"+
    "\1\77\1\75\42\0\1\75\3\0\1\75\2\0\1\75"+
    "\1\0\11\75\1\222\12\75\17\0\5\5\1\223\20\5"+
    "\5\0\1\5\43\0\1\5\1\224\24\5\5\0\1\5"+
    "\43\0\13\5\1\55\12\5\5\0\1\5\43\0\10\5"+
    "\1\225\15\5\5\0\1\5\66\0\1\226\3\0\1\75"+
    "\2\0\1\75\1\0\24\75\17\0\4\5\1\227\21\5"+
    "\5\0\1\5\43\0\3\5\1\230\22\5\5\0\1\5"+
    "\43\0\24\5\1\122\1\5\5\0\1\5\66\0\1\75"+
    "\3\0\1\75\2\0\1\75\1\0\2\75\1\231\2\75"+
    "\1\170\1\75\1\232\1\233\1\75\1\172\3\75\1\234"+
    "\1\235\4\75\17\0\2\5\1\163\23\5\5\0\1\5"+
    "\43\0\1\122\25\5\5\0\1\5\66\0\1\75\3\0"+
    "\1\75\2\0\1\75\1\0\3\75\1\76\20\75\42\0"+
    "\1\75\3\0\1\75\2\0\1\75\1\0\5\75\1\170"+
    "\12\75\1\236\3\75\42\0\1\75\3\0\1\75\2\0"+
    "\1\75\1\0\5\75\1\237\3\75\1\141\12\75\42\0"+
    "\1\75\3\0\1\75\2\0\1\75\1\0\20\75\1\240"+
    "\3\75\42\0\1\75\3\0\1\75\2\0\1\75\1\0"+
    "\15\75\1\241\6\75\42\0\1\75\3\0\1\75\2\0"+
    "\1\75\1\0\7\75\1\242\14\75\42\0\1\75\3\0"+
    "\1\75\2\0\1\75\1\0\13\75\1\243\10\75\42\0"+
    "\1\75\3\0\1\75\2\0\1\75\1\0\3\75\1\242"+
    "\20\75\42\0\1\75\3\0\1\75\2\0\1\75\1\0"+
    "\12\75\1\244\11\75\42\0\1\75\3\0\1\75\2\0"+
    "\1\75\1\0\5\75\1\141\16\75\42\0\1\75\3\0"+
    "\1\75\2\0\1\75\1\0\11\75\1\141\12\75\42\0"+
    "\1\75\3\0\1\75\2\0\1\75\1\0\21\75\1\243"+
    "\2\75\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9072];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\5\11\21\1\1\0\1\11\2\0"+
    "\20\1\1\11\1\1\1\0\34\1\1\0\25\1\1\11"+
    "\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MichelsonLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MichelsonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 24: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 25: break;
          case 3: 
            { return TYPE_NAME;
            } 
            // fall through
          case 26: break;
          case 4: 
            { return INT;
            } 
            // fall through
          case 27: break;
          case 5: 
            { return INSTRUCTION_TOKEN;
            } 
            // fall through
          case 28: break;
          case 6: 
            { return ANNOTATION_TOKEN;
            } 
            // fall through
          case 29: break;
          case 7: 
            { return COMMENT_LINE;
            } 
            // fall through
          case 30: break;
          case 8: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 31: break;
          case 9: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 32: break;
          case 10: 
            { return LEFT_CURLY;
            } 
            // fall through
          case 33: break;
          case 11: 
            { return RIGHT_CURLY;
            } 
            // fall through
          case 34: break;
          case 12: 
            { return SEMI;
            } 
            // fall through
          case 35: break;
          case 13: 
            { return TYPE_NAME_COMPLEX;
            } 
            // fall through
          case 36: break;
          case 14: 
            { return STRING;
            } 
            // fall through
          case 37: break;
          case 15: 
            { return TAG;
            } 
            // fall through
          case 38: break;
          case 16: 
            { return TYPE_NAME_COMPARABLE;
            } 
            // fall through
          case 39: break;
          case 17: 
            { return BYTE;
            } 
            // fall through
          case 40: break;
          case 18: 
            { return MACRO_TOKEN;
            } 
            // fall through
          case 41: break;
          case 19: 
            { return SECTION_NAME;
            } 
            // fall through
          case 42: break;
          case 20: 
            { return TRUE;
            } 
            // fall through
          case 43: break;
          case 21: 
            { return UNIT;
            } 
            // fall through
          case 44: break;
          case 22: 
            { return COMMENT_MULTI_LINE;
            } 
            // fall through
          case 45: break;
          case 23: 
            { return FALSE;
            } 
            // fall through
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
